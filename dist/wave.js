var Wave=function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=2)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ease=function(t,e,n,i){return(t/=i/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.is_running=!1,this.renderObjects=[],this.canvas=document.getElementById(t),this.context=this.canvas.getContext("2d"),this.updateCanvasSize()}return t.prototype.updateCanvasSize=function(){this.canvas.width=this.canvas.offsetWidth,this.canvas.height=this.canvas.offsetHeight},t.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.start=function(){this.is_running=!0,this.loop()},t.prototype.stop=function(){this.is_running=!1},t.prototype.addRenderObject=function(t){this.renderObjects.push(t)},t.prototype.flushRenderObjects=function(){this.renderObjects=Array()},t.prototype.getRenderObjects=function(){return this.renderObjects},t.prototype.loop=function(){this.clear();for(var e=0,n=this.renderObjects;e<n.length;e++){n[e].render(this.canvas,this.context)}this.is_running&&t.requestAnimFrame()(this.loop.bind(this))},t.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}},t}();e.Renderer=i},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=n(1),s=n(0);e.DEBUG=!1;var h=function(){function t(t,e){this.defaultConfig={waves:[{backgroundColor:"white",strokeColor:!1,speed:2,distance:200},{backgroundColor:!1,strokeColor:"white",strokeWidth:5,speed:2,distance:200},{backgroundColor:"rgba(255, 255, 255, 0.2)",strokeColor:!1,speed:2,distance:200}]},this.waves=Array(),this.renderer=new r.Renderer(t),this.renderer.start(),this.config=this.defaultConfig,this.setup(),this.addEventListeners()}return t.prototype.setup=function(){this.renderer.flushRenderObjects();for(var t=0,e=this.config.waves;t<e.length;t++){var n=e[t],i=new c(this,this.renderer,n);this.waves.push(i),this.renderer.addRenderObject(i)}},t.prototype.addEventListeners=function(){var t=this;window.addEventListener("resize",function(){t.renderer.updateCanvasSize(),t.setup()})},t}();e.Wave=h;var a=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.initial_y=n,i.drift=Math.round(10*Math.random())+40,i.tk=Math.round(100*Math.random()),i}return o(e,t),e.prototype.update=function(t,e){this.tk+=1;var n=0;n=this.tk<=100?s.ease(this.tk,0,1,100):1-s.ease(this.tk-100,0,1,100),this.y=this.initial_y+this.drift*n,this.tk>200&&(this.tk=0)},e}(function(){function t(t,e){this.x=t,this.y=e}return t.prototype.update=function(t,e){},t}()),c=function(){function t(t,e,n){this.points=Array(),this.wave=t,this.renderer=e,this.config=n;var i=Math.floor(e.canvas.width/this.config.distance),o=e.canvas.width-i*this.config.distance;this.threshold=o,console.log(this.threshold);for(var r=-2;r<i+2;r++)this.points.push(new a(this.config.distance*r,e.canvas.height/2))}return t.prototype.render=function(t,n){n.beginPath();var i=this.points.length;n.moveTo(this.points[0].x,this.points[0].y);for(var o=0;o<i-1;o++){var r=(this.points[o].x+this.points[o+1].x)/2,s=(this.points[o].y+this.points[o+1].y)/2;n.quadraticCurveTo(this.points[o].x,this.points[o].y,r,s)}if(this.logic(t,n),n.lineTo(this.points[i-1].x,this.points[i-1].y),n.lineTo(this.points[i-1].x,t.height+100),n.lineTo(this.points[0].x,t.height+100),n.closePath(),this.config.backgroundColor&&(n.fillStyle=this.config.backgroundColor,n.fill()),this.config.strokeColor&&(n.strokeStyle=this.config.strokeColor,this.config.strokeWidth&&(n.lineWidth=this.config.strokeWidth),n.stroke()),e.DEBUG)for(var h=0,a=this.points;h<a.length;h++){var c=a[h];n.beginPath(),n.arc(c.x,c.y,3,0,2*Math.PI,!1),n.fillStyle="red",n.fill()}},t.prototype.logic=function(t,e){for(var n=0,i=this.points;n<i.length;n++){var o=i[n];o.update(t,e),o.x+=this.config.speed}var r=this.points[this.points.length-1];this.points[this.points.length-2].x>t.width+this.config.distance&&(r.x=Math.round(2*-this.config.distance+this.threshold),this.points.unshift(this.points.pop()))},t}();e.default=h}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,