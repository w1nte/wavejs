var js=function(t){var e={};function n(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=t,n.c=e,n.d=function(t,e,i){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(i,o,function(e){return t[e]}.bind(null,o));return i},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=3)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t,e){this.defaultConfig=t,this.userConfig=e,this.config=this.extend({},t,e)}return t.prototype.getConfig=function(){return this.config},t.prototype.get=function(t,e){var n=this.config[t];return n||(e||!1)},t.prototype.extend=function(){for(var e=[],n=0;n<arguments.length;n++)e[n]=arguments[n];for(var i=1;i<e.length;i++)for(var o in e[i])e[i].hasOwnProperty(o)&&(t.is_dictionary(e[i][o])?e[0][o]=this.extend(e[0][o],e[i][o]):e[0][o]=e[i][o]);return e[0]},t.is_dictionary=function(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date)},t}();e.Config=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(5),o=n(0),r=function(){function t(e,n){this.points=Array(),this.renderer=e,this.config=new o.Config(t.defaultConfig,n),console.log(this.config.getConfig()),this.generate()}return t.prototype.render=function(t,e){e.beginPath();var n=this.points.length;e.moveTo(this.points[0].x,this.points[0].y);for(var i=0;i<n-1;i++){var o=(this.points[i].x+this.points[i+1].x)/2,r=(this.points[i].y+this.points[i+1].y)/2;e.quadraticCurveTo(this.points[i].x,this.points[i].y,o,r)}this.logic(t,e),e.lineTo(this.points[n-1].x,this.points[n-1].y);var s=t.height+2*this.config.get("strokeWidth",1);this.config.get("upsidedown")&&(s=2*-this.config.get("strokeWidth",1)),e.lineTo(this.points[n-1].x,s),e.lineTo(this.points[0].x,s),e.closePath(),this.config.get("backgroundColor")&&(e.fillStyle=this.config.get("backgroundColor"),e.fill()),this.config.get("strokeColor")&&(e.strokeStyle=this.config.get("strokeColor"),this.config.get("strokeWidth")&&(e.lineWidth=this.config.get("strokeWidth")),e.stroke());for(var h=0,a=this.points;h<a.length;h++){a[h].render(t,e)}},t.prototype.logic=function(t,e){for(var n=this.config.get("speed",0),i=0,o=this.points;i<o.length;i++){var r=o[i];r.update(t,e),r.x+=n}var s=this.points[this.points.length-1],h=this.points[0];n>0?this.points[this.points.length-2].x>t.width+this.config.get("distance")&&(s.x=Math.round(2*-this.config.get("distance")+this.threshold),this.points.unshift(this.points.pop())):n<0&&this.points[1].x<-this.config.get("distance")&&(h.x=Math.round(t.width+2*this.config.get("distance")-this.threshold),this.points.push(this.points.shift()))},t.prototype.generate=function(){var t=Math.floor(this.renderer.canvas.width/this.config.get("distance"));this.threshold=this.renderer.canvas.width-t*this.config.get("distance");for(var e=-2;e<t+2;e++){var n=new i.PointDefault(this.config.get("distance")*e,this.renderer.canvas.height/2);n.drift=this.config.get("drift",10),this.points.push(n)}},t.defaultConfig={speed:0,distance:500,type:"default",drift:10,upsidedown:!1},t}();e.Controller=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=function(){function t(t){this.is_running=!1,this.renderObjects=[],this.canvas=document.getElementById(t),this.context=this.canvas.getContext("2d"),this.updateCanvasSize()}return t.prototype.updateCanvasSize=function(){this.canvas.width=this.canvas.offsetWidth,this.canvas.height=this.canvas.offsetHeight},t.prototype.clear=function(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)},t.prototype.start=function(){this.is_running=!0,this.loop()},t.prototype.stop=function(){this.is_running=!1},t.prototype.addRenderObject=function(t){this.renderObjects.push(t)},t.prototype.flushRenderObjects=function(){this.renderObjects=Array()},t.prototype.getRenderObjects=function(){return this.renderObjects},t.prototype.loop=function(){this.clear();for(var e=0,n=this.renderObjects;e<n.length;e++){n[e].render(this.canvas,this.context)}this.is_running&&t.requestAnimFrame()(this.loop.bind(this))},t.requestAnimFrame=function(){return window.requestAnimationFrame||window.webkitRequestAnimationFrame||function(t){window.setTimeout(t,1e3/60)}},t}();e.Renderer=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=n(1),r=n(0);e.DEBUG=!1;var s=function(){function t(e,n){this.waves=Array(),this.renderer=new i.Renderer(e),this.renderer.start(),this.config=new r.Config(t.defaultConfig,n),this.setup(),this.addEventListeners()}return t.prototype.setup=function(){this.renderer.flushRenderObjects();var t=this.config.get("waves");if(t)for(var e=0,n=t;e<n.length;e++){var i=n[e],r=new o.Controller(this.renderer,i);this.waves.push(r),this.renderer.addRenderObject(r)}},t.prototype.addEventListeners=function(){var t=this;window.addEventListener("resize",function(){t.renderer.updateCanvasSize(),t.setup()})},t.defaultConfig={},t}();e.js=s},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.ease=function(t,e,n,i){return(t/=i/2)<1?n/2*t*t+e:-n/2*(--t*(t-2)-1)+e}},function(t,e,n){"use strict";var i,o=this&&this.__extends||(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])},function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var r=n(3),s=n(4),h=function(){function t(t,e){this.x=t,this.y=e}return t.prototype.render=function(t,e){r.DEBUG&&(e.beginPath(),e.arc(this.x,this.y,3,0,2*Math.PI,!1),e.fillStyle="red",e.fill())},t.prototype.update=function(t,e){},t}();e.Point=h;var a=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.initial_y=n,i.drift=Math.round(10*Math.random())+40,i.tk=Math.round(100*Math.random()),i}return o(e,t),e.prototype.update=function(t,e){this.tk+=1;var n=0;n=this.tk<=100?s.ease(this.tk,0,1,100):1-s.ease(this.tk-100,0,1,100),this.y=this.initial_y+this.drift*n,this.tk>200&&(this.tk=0)},e}(h);e.PointDefault=a}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,